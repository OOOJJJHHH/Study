class SList:
    class Node:
        def __init__(self, item, link):
            self.item = item
            self.next = link

    def __init__(self):
        print("난 SList의 생성자")
        self.head = None
        self.size = 0

    def isEmpty(self):
        return self.size == 0

    def insert_front(self, item):
        if self.isEmpty():
            self.head = self.Node(item , None)
        else:
            self.head = self.Node(item, self.head)
        self.size += 1

    def insert_after(self, item, p):
        p.next = self.Node(item, p.next)
        self.size += 1

    def search(self, target):
        p = self.head
        for k in range(self.size):
            print(p.item)
            if target == p.item:
                return k
            p = p.next
    
    def delete_after(self, p):
        if self.isEmpty():
            print("리스트가 텅 비어있어서 삭제 불가")
            return None
        else:
            t = p.next
            p.next = t.next
            del t
            self.size -= 1
            
    def delete_front(self):
        if self.isEmpty():
            print("리스트가 텅 비어있어서 삭제 불가")
            return None
        else:
            t = self.head
            self.head = self.head.next
            del t
            self.size -= 1
    
    # 사용자 지정 인덱스에 새로운 노드를 삽입하는 함수
    def insert_index(self, index, item):
        if index < 0 or index > self.size:
            print("유효하지 않은 인덱스입니다.")
            return
        
        if index == 0:
            self.insert_front(item)  # 첫 번째 위치에 삽입은 insert_front 사용
        else:
            p = self.head
            for _ in range(index - 1):  # index-1 위치로 이동
                p = p.next
            self.insert_after(item, p)  # p 위치 뒤에 삽입

        self.size += 1  # 리스트의 크기 증가

    # 사용자 지정 인덱스에 있는 노드를 삭제하는 함수
    def delete_index(self, index):
        if index < 0 or index >= self.size:
            print("유효하지 않은 인덱스입니다.")
            return
        
        if index == 0:
            self.delete_front()  # 첫 번째 노드를 삭제는 delete_front 사용
        else:
            p = self.head
            for _ in range(index - 1):  # index-1 위치로 이동
                p = p.next
            self.delete_after(p)  # p 뒤의 노드 삭제

        self.size -= 1  # 리스트의 크기 감소
    
    # 연결 리스트의 마지막 노드를 삭제하는 함수
    def delete_final(self):
        if self.isEmpty():
            print("리스트가 비어 있어 삭제할 수 없습니다.")
            return
        
        if self.size == 1:
            self.delete_front()  # 마지막 노드가 하나일 경우 delete_front 사용
        else:
            p = self.head
            while p.next and p.next.next:  # 마지막 노드 직전까지 이동
                p = p.next
            self.delete_after(p)  # 마지막 노드 삭제
        
        self.size -= 1  # 리스트의 크기 감소

    def printList(self):
        p = self.head
        while p:
            if p.next is not None:
                print(p.item, "=>", end="")
            else:
                print(p.item)
            p = p.next


# 테스트 코드
if __name__ == "__main__":
    s = SList()
    s.insert_front("apple")
    s.insert_front("orange")
    s.printList()
    s.insert_after("cherry", s.head.next)
    s.printList()
    s.insert_front("pear")

    s.insert_front("melon")
    s.insert_front("strawberry")
    s.insert_front("grape")
    s.insert_front("banana")

    s.printList()
    print("cherry는 (%d+1)번째 노드에 있다" % s.search("cherry"))
    s.delete_after(s.head)
    s.printList()
    print("첫번째 노드 삭제 후 \t\t ")
    s.delete_front()
    s.printList()

    # 실습 과제 함수 작성
    s.insert_index(2, "melon")  # 2번 인덱스에 "melon" 삽입
    s.delete_index(3)  # 3번 인덱스 삭제
    s.delete_final()  # 마지막 노드 삭제
    
    s.printList()
